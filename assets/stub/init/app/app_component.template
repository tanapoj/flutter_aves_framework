/// Project: {{#projectName}}
/// Author: {{#author}}
/// Created at: {{#createdAt}}

import 'package:flutter/material.dart';
import 'package:aves/architecture/component/logic.dart' as l;
import 'package:aves/architecture/component/view.dart' as v;
import 'package:aves/common/syslog.dart';
import 'package:{{#projectName}}/app/global_var.dart';
import 'index.dart';

abstract class ComponentLogic<T> extends l.Logic<T> {
  ComponentLogic({
    Key? key,
    required Widget Function(ComponentLogic) builder,
  }) : super(key: key, builder: (component) => builder(component as ComponentLogic));

  @Deprecated('Use [router]')
  AppNavigator get nav {
    if (context == null) {
      sysLog.e('context is null');
      throw Exception();
    }
    return App.of(context!).navigator;
  }

  AppRouterFacade get router {
    if (context == null) {
      sysLog.e('context is null');
      throw Exception();
    }
    return AppRouterFacade(
      appNavigator: App.of(context!).navigator,
      context: context!,
      routeRefName: name,
    );
  }

  AppTranslator get translator {
    if (context == null) {
      sysLog.e('context is null');
      throw Exception();
    }

    return App.of(context!).translator;
  }

  AppUi get ui {
    if (context == null) {
      sysLog.e('context is null');
      throw Exception();
    }
    return App.of(context!).ui;
  }

  AppAuth get auth {
    if (context == null) {
      sysLog.e('context is null');
      throw Exception();
    }
    return App.of(context!).auth;
  }

  GlobalVar get global {
    if (context == null) {
      sysLog.e('context is null');
      throw Exception();
    }
    return App.of(context!).global;
  }
}

abstract class View<BC extends ComponentLogic> extends v.View<BC> {
  const View(
    BC component, {
    Key? key,
  }) : super(component, key: key);

  AppNavigator get nav => logic.nav;

  AppRouterFacade get router => logic.router;

  AppTranslator get translator => logic.translator;

  AppUi get ui => logic.ui;

  AppAuth get auth => logic.auth;

  GlobalVar get global => logic.global;
}
