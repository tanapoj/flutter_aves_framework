/// Project: {{#projectName}}
/// Author: {{#author}}
/// Created at: {{#createdAt}}

import 'package:flutter/widgets.dart';
import 'package:aves/architecture/environment.dart';
import 'package:aves/architecture/provider.dart';
import 'package:aves/common/log.dart';
import 'package:aves/common/syslog.dart';
import 'package:flutter_live_data/index.dart';
import 'package:{{#projectName}}/app/global_var.dart';
import 'package:{{#projectName}}/app/app_auth.dart';
import 'package:{{#projectName}}/app/app_navigator.dart';
import 'package:{{#projectName}}/app/app_translator.dart';
import 'package:{{#projectName}}/app/app_ui.dart';

// ignore: must_be_immutable
class App extends AvesProvider {
  App({
    super.key,
    required super.child,
    required Environment env,
  }) : super(env: env);

  BuildContext? _variantContext;
  bool _isAlreadyRunAsyncInit = false;

  late final LiveData<App> $state = LiveData(this);
  late AppNavigator _navigator = AppNavigator();
  late AppTranslator _translator = AppTranslator(this);
  late AppUi _ui = AppUi(this);
  late AppAuth _auth = AppAuth(this);
  late GlobalVar _globalVar = GlobalVar();

  AppNavigator get navigator => _navigator;

  AppRouterFacade get router {
    return AppRouterFacade(
      appNavigator: navigator,
      context: _variantContext!,
      routeRefName: '_app',
    );
  }

  AppTranslator get translator => _translator;

  AppUi get ui => _ui;

  AppAuth get auth => _auth;

  GlobalVar get global => _globalVar;

  void set({
    Environment? env,
    AppNavigator? navigator,
    AppTranslator? translator,
    AppUi? ui,
    AppAuth? auth,
    GlobalVar? globalVar,
  }) {
    if (env != null) {
      this.env = env;
    }
    if (navigator != null) {
      _navigator = navigator;
    }
    if (translator != null) {
      _translator = translator;
    }
    if (ui != null) {
      _ui = ui;
    }
    if (auth != null) {
      _auth = auth;
    }
    if (globalVar != null) {
      _globalVar = globalVar;
    }
  }

  static App? instance;

  static App of(BuildContext context) {
    final AvesProvider? result = context.dependOnInheritedWidgetOfExactType<App>();
    assert(result != null || result is! App, 'No AppProvider found in context');
    instance = result! as App;
    instance!._variantContext = context;
    return instance!;
  }

  changeNotify(){
    $state.tick();
  }

  @override
  bool updateShouldNotify(App oldWidget) =>
      env != oldWidget.env &&
      navigator != oldWidget.navigator &&
      translator != oldWidget.translator &&
      ui != oldWidget.ui &&
      auth != oldWidget.auth;

  @override
  syncInit() {
    sysLog.d('AppProvider run syncInit ... start');
    appLog.setControlProvider(this);
    sysLog.setControlProvider(this);
    navigator.syncInit();
    ui.syncInit();
    auth.syncInit();
    translator.syncInit();
    global.syncInit();
    sysLog.d('AppProvider run syncInit ... done');
  }

  @override
  asyncInit() async {
    if (_isAlreadyRunAsyncInit) return;
    sysLog.d('AppProvider run asyncInit ... start');
    await Future.wait(<Future>[
      navigator.asyncInit(),
      ui.asyncInit(),
      auth.asyncInit(),
      translator.asyncInit(),
      global.asyncInit(),
    ]);
    _isAlreadyRunAsyncInit = true;
    sysLog.d('AppProvider run asyncInit ... done');
  }

  @override
  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {
    return 'AppProvider{'
        '   navigator: $navigator'
        '   translator: $translator'
        '   ui: $ui'
        '   auth: $auth'
        '}';
  }
}

/// App Facade

App app([BuildContext? context]) {
  if (context != null) {
    return App.of(context);
  }
  return App.instance!;
}

class AppContext {
  Environment? env;
  AppTranslator? translator;
  AppUi? ui;
  AppAuth? auth;

  AppContext({this.env, this.translator, this.ui, this.auth});
}

extension AppIntercept on App {
  void override({
    required AppContext context,
    required void Function(AppContext prev, AppContext current) action,
  }) {
    var prevContext = AppContext()
      ..env = env
      ..translator = translator
      ..ui = ui
      ..auth = auth;

    var currentContext = AppContext()
      ..env = context.env ?? env
      ..translator = context.translator ?? translator
      ..ui = context.ui ?? ui
      ..auth = context.auth ?? auth;

    set(
      env: currentContext.env,
      translator: currentContext.translator,
      ui: currentContext.ui,
      auth: currentContext.auth,
    );

    action(prevContext, currentContext);

    set(
      env: prevContext.env,
      translator: prevContext.translator,
      ui: prevContext.ui,
      auth: prevContext.auth,
    );
  }
}
